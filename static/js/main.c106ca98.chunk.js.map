{"version":3,"sources":["assets/fog.jpg","NavBar.js","Home.js","Resume.js","App.js","serviceWorker.js","index.js","assets/fog_2.png"],"names":["module","exports","Styles","styled","div","NavsBar","className","Container","style","listStyleType","href","Fog_2","Home","fluid","Resume","id","src","width","height","Fog","App","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,iC,ogCCI3C,IAAMC,EAASC,IAAOC,IAAV,KA4CCC,EAAU,kBACnB,kBAACH,EAAD,KACI,yBAAKI,UAAY,OACb,kBAACC,EAAA,EAAD,KACE,wBAAID,UAAY,MAAME,MAAO,CAAEC,cAAe,SAC5C,wBAAIH,UAAY,SAAQ,uBAAGA,UAAY,OAAOI,KAAK,KAA3B,SACxB,wBAAIJ,UAAY,SAAQ,uBAAGA,UAAY,OAAOI,KAAK,WAA3B,WACxB,wBAAIJ,UAAY,SAAQ,uBAAGA,UAAY,OAAOI,KAAK,KAA3B,aACxB,wBAAIJ,UAAY,SAAQ,uBAAGA,UAAY,OAAOI,KAAK,KAA3B,iB,8eCjDxC,IAAMR,EAASC,IAAOC,IAAV,IAGUO,KAkBTC,EAAO,kBAChB,kBAAC,EAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACP,UAAY,SACrB,6BACI,wBAAIA,UAAY,SAAhB,2C,k7BCzBhB,IAAMJ,EAASC,IAAOC,IAAV,IAGcO,KA6CbG,EAAS,kBAClB,kBAAC,EAAD,KACI,kBAAC,IAAD,CAAOD,OAAK,EAACP,UAAY,SAASS,GAAK,UACnC,kBAACR,EAAA,EAAD,CAAWD,UAAY,oBACvB,yBAAKA,UAAY,kBACT,kBAACC,EAAA,EAAD,CAAWD,UAAY,yBACnB,4BAAQU,IAAI,4EAA4EC,MAAM,MAAMC,OAAO,c,ubCrDnI,IAAMhB,EAASC,IAAOC,IAAV,IAEUe,KAqCPC,MAdf,WACE,OACE,kBAAC,EAAD,KACA,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,CAASf,UAAY,WACrB,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,UC5BYgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5BxC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.c106ca98.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/fog.34593bc3.jpg\";","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Container } from 'react-bootstrap';\r\n\r\nconst Styles = styled.div`\r\n    .bar {\r\n        text-align: center;\r\n        background-color: black;\r\n        padding: 5px 0px 0px 0px;\r\n        position: fixed;\r\n        top: 0px;\r\n        width: 100%;\r\n        z-index: 1;\r\n    }\r\n\r\n    .nav {\r\n        margin: 0px 0px 0px 0px;\r\n        height: 35px;\r\n        text-align: center;\r\n    }\r\n\r\n    .navli {\r\n        display: inline;\r\n        height: 50px;\r\n        padding: 36px 2px 9px 2px;\r\n        transition: background-color 0.4s;\r\n\r\n        &:hover {\r\n            background-color: #bfbfbf;\r\n        }\r\n    }\r\n\r\n    .nava {\r\n        color: grey;\r\n        font-size: 20px;\r\n        text-decoration: none;\r\n        text-align: center;\r\n        padding: 32px 43px 8px 43px;\r\n\r\n        &:hover {\r\n            color: black;\r\n        }\r\n\r\n    }\r\n\r\n\r\n`;\r\n\r\nexport const NavsBar = () => (\r\n    <Styles>\r\n        <div className = \"bar\">\r\n            <Container>\r\n              <ul className = \"nav\" style={{ listStyleType: \"none\" }}>\r\n                <li className = \"navli\"><a className = \"nava\" href=\"#\">Home</a></li>\r\n                <li className = \"navli\"><a className = \"nava\" href=\"#resume\">Resume</a></li>\r\n                <li className = \"navli\"><a className = \"nava\" href=\"#\">Projects</a></li>\r\n                <li className = \"navli\"><a className = \"nava\" href=\"#\">Contact</a></li>\r\n              </ul>\r\n            </Container>\r\n        </div>              \r\n    </Styles>\r\n)\r\n\r\nexport default NavsBar","import React from 'react';\r\nimport './App.css';\r\nimport styled from 'styled-components';\r\nimport { Jumbotron as Jumbo } from 'react-bootstrap';\r\nimport Fog_2 from './assets/fog_2.png'\r\n\r\n\r\nconst Styles = styled.div `\r\n\r\n.jumbo {\r\n    background: url(${Fog_2}) no-repeat fixed bottom;\r\n    background-size: cover;\r\n    color: #efefef;\r\n    height: 720px;\r\n    position: relative;\r\n    width: 100%;\r\n  }\r\n\r\n  .intro {\r\n      font-size: 60px;\r\n      text-align: center;\r\n      color: linear-gradient(90deg, rgba(255,255,255,1) 0%, rgba(2,0,36,1) 100%);\r\n      position: relative;\r\n      top: 250px;\r\n      margin: 0px;\r\n  }\r\n`\r\n\r\nexport const Home = () => (\r\n    <Styles>\r\n        <Jumbo fluid className = \"jumbo\">\r\n            <div>\r\n                <h1 className = \"intro\">\r\n                    Welcome to Baron's personal website\r\n                </h1>\r\n            </div>\r\n        </Jumbo>\r\n    </Styles>\r\n)\r\n\r\nexport default Home","import React from 'react';\r\nimport './App.css';\r\nimport styled from 'styled-components';\r\nimport { Jumbotron as Jumbo, Container } from 'react-bootstrap';\r\nimport Fog_2 from './assets/fog_2.png';\r\n\r\n\r\nconst Styles = styled.div `\r\n\r\n    .resume {\r\n        background: url(${Fog_2}) no-repeat fixed bottom;\r\n        background-size: cover;\r\n        color: #efefef;\r\n        height: 720px;\r\n        position: relative;\r\n        width: 100%;\r\n    }\r\n\r\n    .container_resume {\r\n        text-align: center;\r\n    }\r\n\r\n    .overlay_resume {\r\n        color: black;\r\n        background-color: clear;\r\n        opacity: 100%;\r\n        height: 660px;\r\n        width: 550px;\r\n        margin: 45px 0px 0px 0px;\r\n        display: inline-block;\r\n    }\r\n\r\n    .contact {\r\n        margin: -15px 0px 0px 0px;\r\n    }\r\n\r\n    .topic {\r\n        margin: -10px 0px 5px 10px;\r\n        color: black;\r\n        font-weight: bold;\r\n        font-size: 1em;\r\n    }\r\n\r\n   .organ {\r\n      font-size: 1.25em;\r\n      margin: -7px 0px 0px 10px;\r\n      font-weight: 700;\r\n    }\r\n\r\n    .container_resume_body {\r\n        text-align: left;\r\n    }\r\n  \r\n`\r\n\r\nexport const Resume = () => (\r\n    <Styles>\r\n        <Jumbo fluid className = \"resume\" id = \"resume\">\r\n            <Container className = \"container_resume\">\r\n            <div className = \"overlay_resume\">\r\n                    <Container className = \"container_resume_body\">\r\n                        <iframe src=\"https://drive.google.com/file/d/1Qaa7q_jSqV1nouCZrATgl4j3jAp6WYMi/preview\" width=\"550\" height=\"660\"></iframe>\r\n                    </Container>\r\n            </div>\r\n            </Container>\r\n        </Jumbo>\r\n    </Styles>\r\n)\r\n\r\nexport default Resume","import React from 'react';\nimport './App.css';\nimport styled from 'styled-components';\nimport Fog from './assets/fog.jpg';\nimport { NavsBar } from './NavBar'\nimport { Home } from './Home'\nimport { Resume } from './Resume'\n\nconst Styles = styled.div`\n  .jumbo {\n    background: url(${Fog}) no-repeat fixed bottom;\n    background-size: cover;\n    color: #efefef;\n    height: 100%px;\n    position: relative;\n    z-index: -2;\n  }\n  .overlay {\n    background-color: #000;\n    opacity: 0.2;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n    z-index: -1;\n  }\n\n  .naving {\n    position: fixed;\n  }\n\n`\n\nfunction App() {\n  return (\n    <Styles>\n    <React.Fragment>\n      <NavsBar className = \"naving\"/>\n      <div>\n        <Home/>\n        <Resume/>\n      </div>\n    </React.Fragment>\n    </Styles>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/fog_2.89d55f66.png\";"],"sourceRoot":""}